
subprojects {
    apply plugin: 'java-library'
    group = 'com.brimworks'
    version = '1.0'

    repositories {
        jcenter()
    }

    dependencies {
        // Use JUnit Jupiter API for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'

        // Use JUnit Jupiter Engine for testing.
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }

    test {
        // Use junit platform for unit tests
        useJUnitPlatform {
            includeTags "unit"
        }
        testLogging {
            exceptionFormat = "full"
            showStandardStreams = true
        }
    }

    def ragels = []
    fileTree("src/main/ragel").matching {
        include "**/*.java.rl"
    }.visit { input ->
        if ( input.directory ) return
        def ragel = task "${input.relativePath.toString().replaceAll("[/\\\\:<>\"?*|]", " ")}" (type:Ragel) {
            inputFile input.file.absoluteFile
            outputFile file("${buildDir}/generated-src/java/" + input.relativePath - ".rl")
        }
        ragels << ragel
    }

    compileJava {
        dependsOn ragels
    }
    sourceSets {
        main {
            java {
                srcDirs 'build/generated-src/java/'
            }
        }
    }
}

abstract class Ragel extends DefaultTask {
    @InputFile
    abstract File inputFile
    @OutputFile
    abstract File outputFile
    @TaskAction
    void execute(InputChanges inputChanges) {
        project.exec {
            commandLine "ragel", "-J", "-o", outputFile, inputFile
        }
    }
};
